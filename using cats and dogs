from keras.models import Sequential
from keras.layers import Convolution2D #for convolutional 2d extraction
from keras.layers import MaxPooling2D #feature extraction
from keras.layers import Flatten
from keras.layers import Dense

#initatiate model layers
classifier=Sequential()

#Adding Convolution layer for feature extraction
classifier.add(Convolution2D(32,3,3,input_shape=(64,64,3),activation ="relu"))
#adding pooling
classifier.add(MaxPooling2D(pool_size=(2,2)))
#Flatten and maxpooling for feeding
classifier.add(Convolution2D(32,3,3,activation ="relu"))
classifier.add(MaxPooling2D(pool_size=(2,2)))
classifier.add(Flatten())

#FUll connection using Neural Network
classifier.add(Dense(output_dim=128,activation="relu"))
classifier.add(Dense(output_dim=1,activation="sigmoid"))
classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
classifier.summary() # for network topology


#Fitting with same image but changing styles
from keras.preprocessing.image import ImageDataGenerator #for changing the image and running for more accuracy
train_datagen = ImageDataGenerator(rescale = 1./255,sear_range = 0.2,zoom_range = 0.2,horizontal_flip = True)
test_datagen = ImageDataGenerator(rescale = 1./255)
training_set = train_datagen.flow_from_directory('dataset/training_set',target_size = (64, 64),batch_size = 32,class_mode = 'binary')
test_set = test_datagen.flow_from_directory('dataset/test_set',target_size = (64, 64),batch_size = 32,class_mode = 'binary')                                         
classifier.fit_generator(training_set,samples_per_epoch = 8000,nb_epoch = 25,validation_data = test_set,nb_val_samples = 2000)

from IPython.display import display
from PIL import Image
classifier.fit_generator(training_set,steps_per_epoch=8000,epochs=10, validation_data=test_set, validation_steps=800000)

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('vasisth.img', target_size=(64,64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
result = classifier.predict(test_image)
training_set.class_indices

if result[0][0] ==0:
    prediction = 'Dog'
else:
    prediction ='cat'
    
print(prediction)
